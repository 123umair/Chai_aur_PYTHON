List:
Lists are used to store multiple items in a single variable.

Lists are one of 4 built-in data types in Python used to store collections of data, the other 3 are Tuple, Set, and Dictionary, all with different qualities and usage.

Lists are created using square brackets:
Create a List:

thislist = ["apple", "banana", "cherry"]
print(thislist)


// one another note
# Notes on List Slicing and Assignment:
# - When you use mylist[start:end], it returns a new list containing the elements from index 'start' up to, but not including, 'end'.
# - If start and end are the same (e.g., mylist[1:1]), the result is an empty list because there are no elements between those indices.
# - Assigning a list to a slice (e.g., mylist[1:1] = ["a", "b"]) will insert the new elements at that position, shifting the existing elements to the right.
# - If you assign a string (not a list) to a slice, each character of the string will be inserted as a separate element.
# - Slicing and assignment can be used to insert, replace, or remove elements in a list efficiently.
# - Example: mylist[2:4] = ["x", "y"] will replace elements at index 2 and 3 with "x" and "y".
# - Example: mylist[1:3] = [] will remove elements at index 1 and 2.
# - Slicing is a powerful tool for manipulating lists in Python!
3
# Let's explain this logic step by step:

# When you use mylist[1:1], it means you are slicing from index 1 up to (but not including) index 1.
# Since the start and end are the same, there are no elements between them, so it returns an empty list:


**************************                           *******************************
###########################  Insert Method in python ###############################
**************************                           *******************************


 The insert() method in Python lists is used to add an item at a specific position (index) in the list.
 Syntax: list.insert(index, item)
 - 'index' is the position where you want to insert the new item.
 - 'item' is the value you want to add.
 The existing elements from that index onwards are shifted to the right.
 Example:
 list2 = [1, 2, 3]
 list2.insert(1, 'a')  # Now list2 becomes [1, 'a', 2, 3]



**************************                           *******************************
###########################  Remove() Method in python ###############################
**************************                           *******************************


now we used the remove method here how it work.... ok

The remove() method in Python lists is used to delete the first occurrence of a specified value from the list.
Syntax: list.remove(item)
'item' is the value you want to remove.
 If the item is not found, Python will raise a ValueError.
Example:
list3 = [10, 20, 30, 20, 40]
list3.remove(20)  # Removes the first occurrence of 20
print(list3)      # Output: [10, 30, 20, 40]

**************************                           *******************************
###########################  copy() Method in python ###############################
**************************                           *******************************

The copy() method in Python lists is used to create a shallow copy of the list.
This means you get a new list with the same elements, but it is a separate object in memory.

Syntax:
list_copy = original_list.copy()

Notes on copy() method:
- The copied list is independent of the original list. Changes to one will not affect the other.
- Only the outer list is copied (shallow copy). If the list contains other mutable objects (like other lists), those are not deeply copied.
- Useful when you want to work with a duplicate of a list without modifying the original.

Example:
original = [1, 2, 3]
copied = original.copy()
original.append(4)
print("Original:", original)  # Output: [1, 2, 3, 4]
print("Copied:", copied)      # Output: [1, 2, 3]

# As shown, modifying 'original' after copying does not change 'copied'.
